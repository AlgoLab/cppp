#!/usr/bin/env ruby
# coding: utf-8

# Copyright 2015
# Gianluca Della Vedova <http://gianluca.dellavedova.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This program receives a matrix (option -m) and a phylogeny (option -p)
# in Newick format and checks if the phylogeny realizes the matrix.
# The matrix has a species for each row and a character for each column.
# Each entry M[s,c] can be:
# 0: species s does not possess character c
# 1: species s possesses character c
# 2: species s does not possess character c, and neither any ancestor of s possesses c
#
# The program returns 0 and produces no output if the phylogeny realizes
# the matrix, otherwise it returns 1 and outputs at least a species and a character
# that are not realized correctly

require 'fileutils'
require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'
require 'matrix'
require 'set'
require 'parslet'
include Parslet
require 'pry'

class OptparseExample
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.library = []
    options.inplace = false
    options.encoding = "utf8"
    options.transfer_type = :auto
    options.verbose = false

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: check_tree [options]"

      opts.separator ""
      opts.separator "Specific options:"

      # Mandatory argument.
      opts.on("-d", "--debug") do
        options.debug = true
      end


      # Mandatory argument.
      opts.on("-m", "--matrix MATRIX_FILENAME",
              "Input matrix") do |matrix|
        options.matrix = matrix
      end

      # Mandatory argument.
      opts.on("-p", "--phylogeny PHYLOGENY_FILENAME",
              "Input phylogeny") do |phylogeny|
        options.phylogeny = phylogeny
      end


      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    opt_parser.parse!(args)
    options
  end
end

options = OptparseExample.parse(ARGV)

class LabeledMatrix
  attr_reader :s_labels, :c_labels, :matrix
  # :matrix is the hash of columns, where the keys are the character names and each value
  # is a column that is represented as a string
  # The column ordering is the lexicographic order of the strings

  def pp
    puts @s_labels.length
    puts "#{@s_labels}"
    puts @c_labels.length
    puts "#{@c_labels}"

    puts #{"@matrix}"
    delimiter = @c_labels.map { |c| '_' }.join('')
    @c_labels[0].length.times do |i|
      puts '      ' + @c_labels.map { |c| c[i] }.join('')
    end
    puts "______#{delimiter}"
    @s_labels.map do |s|
      puts "#{s}:#{@c_labels.map { |c| @matrix[s][c] }.join('')}"
    end
    puts "______#{delimiter}"
  end

  def s_label(num)
    return "s%04d" % num
  end

  def c_label(num)
    if @persistent
      sign = num % 2
      root = (num - sign) / 2 + 1
      if sign == 0
        return "C%04d+" % root
      else
        return "C%04d-" % root
      end
    else
      return "C%04d" % (num + 1)
    end
  end


  def initialize(arr, persistent_chars)
    @persistent = persistent_chars
    m = arr.map { |r| r.chomp }
    if m[0][0] == "\#"
      # The first line contains the optional list of characters, separated
      # by ,;
      header = m[0][1..-1]
      @c_labels = header.split(/[,;]/)
    end

    @c_labels = m[0].split('').map.with_index { |x, i| c_label(i) }
    @s_labels = m.map.with_index { |x, i| s_label(i) }

    @matrix = Hash.new()
    @s_labels.map { |s| @matrix[s] = Hash.new() }
    m.map.with_index do |row, idr|
      s = s_labels[idr]
      row.chomp.split('').map.with_index { |x, idx| @matrix[s][c_label(idx)] = x.to_i }
    end
  end

  # Convert a column into a string of 0 and 1
  def col2string(col)
    @s_labels.inject(String.new) { |res, s| res << @matrix[s][col].to_s }
  end

  def remove_null
    @c_labels.delete_if { |c| @s_labels.index { |s| @matrix[s][c] > 0 }.nil? }
  end

  def species(character)
    # Output the list of species that have the input character
    return @s_labels.select { |s| @matrix[s][character] == 1 }
  end

  def characters(species)
    # Find the characters that the input species possesses
    active = @c_labels.select { |c| @matrix[species][c] == 1 }
    #  Remove all eventual negative characters
    active.delete_if { |k| k =~ /\-/ }
  end
end

class PersistentSpecies
  attr_reader :realized, :persistent
  def initialize(realized, persistent)
    @persistent = Set.new(persistent)
    @realized = Set.new(realized).subtract(@persistent)
  end
end

# Gets the parse tree of a Newick trees
# returns a set of Persistentspecies, one for each species
def visit_tree(newick)
  if newick.kind_of?(Array)
    # The current node has at least two children
    # The set of paths is the union over all children
    newick.map { |subtree| visit_tree(subtree) }.inject([]) { |result, set| result + set }
  else
    # Only one child
    subtree_paths = [ PersistentSpecies.new(Set.new, Set.new) ]
    if newick.key? :descendant
      # There is a subtree
      recurse = visit_tree(newick[:descendant])
      subtree_paths.concat(recurse)
    end
    # Add the current edge label to all paths
    unless newick[:parsed_character][:sign] == '-'
      subtree_paths.map { |path| PersistentSpecies.new(path.realized.add("C%04d" % newick[:parsed_character][:int].to_i), path.persistent) }
    else
      subtree_paths.map { |path| PersistentSpecies.new(path.realized, path.persistent.add("C%04d" % newick[:parsed_character][:int].to_i)) }
    end
    # puts "PATHS: #{subtree_paths.class} #{subtree_paths}"
    subtree_paths
  end
end

module Newick
  # Newick format parser
  class Parser < Parslet::Parser
    # Separators
    rule(:lparen)     { space? >> str('(') >> space? }
    rule(:rparen)     { space? >> str(')') >> space? }
    rule(:comma)      { space? >> str(',') >> space? }
    rule(:colon)      { space? >> str(':') >> space? }
    rule(:space)      { match('\s').repeat(1) }
    rule(:space?)     { space.maybe }

    # Character classes
    rule(:integer)    { match('[0-9]').repeat(1).as(:int)  }
    rule(:sign)       { match('[+-]').maybe.as(:sign)  }

    # Labels
    rule(:species)    { str('S')  >> integer }
    rule(:species?)   { species.maybe }
    rule(:character)  { str(':C') >> integer >> sign }
    rule(:name)       { species? >> character.as(:parsed_character) }

    # Tree structure
    rule(:tree)       { descendant.as(:parsed) >> str(';') }
    rule(:descendant) { lparen >> subtree >> (comma >> subtree).repeat >> rparen }
    rule(:subtree)    { leaf | (descendant.as(:descendant) >> name) }
    rule(:leaf)       { name }
    # rule(:internal)   { lparen >> branchset >> rparen >> species? }
    # rule(:branchset)  { branch >> (comma >> branch).repeat }
    # rule(:branch)     { subtree.as(:subtree) >> character }

    root :tree
  end

  class Transformer < Parslet::Transform
    rule(:sign => simple(:sign)) { Integer(x.to_i) }
  end

  def self.parse(s)
    parser = Parser.new
    transformer = Transformer.new

    tree = parser.parse(s)
    out = transformer.apply(tree)

    #    out
    tree
  rescue Parslet::ParseFailed => failure
    puts failure.cause.ascii_tree
  end
end

tree_str = IO.read options.phylogeny
tree = Newick.parse(tree_str.chomp)

# compute the set of paths for the paths from the root to each node of the tree
# Notice that some of those paths might not correspond to a species
from_tree = visit_tree(tree[:parsed]).map { |path| path.realized.sort.to_set }.to_set
#binding.pry


if options.debug
  puts "Tree:"
  from_tree.to_a.map { |path| puts "#{path.to_a.sort.join(' ')}"  }
  puts "Case: #{not (tree_str =~ /\+/).nil?}"
end


# We are checking a persistent phylogeny if the symbol +
# appears in tree_str
m = LabeledMatrix.new(File.readlines(options.matrix), tree_str =~ /\+/)
m.remove_null

if options.debug
  puts "Matrix:"
  m.pp
end
# compute the set of characters of each species in the matrix
from_matrix = m.s_labels.map { |s| m.characters(s).map { |c| c.sub(/[\-\+]/,'') }.sort.to_set }.to_set

# Check that all species can be realized in the tree
unless from_matrix <= from_tree
  puts "Possible species realized"
  from_tree.to_a.map { |path| puts "#{path.to_a.sort.join(' ')}"  }
  puts "Species to realize:"
  from_matrix.to_a.map { |path| puts "#{path.to_a.sort.join(' ')}"  }

  puts "Case Perfect: #{(tree_str =~ /\+/).nil?}"

  puts "The following species cannot be realized"
  not_found = from_matrix - from_tree
  not_found.to_a.map { |path| puts "#{path.to_a.sort.join(' ')}"  }
  m.s_labels.map do |s|
    if not_found.include?(m.characters(s).to_set)
      puts "#{s}: #{m.characters(s).to_a.sort.join(' ')}"
    end
  end
end
